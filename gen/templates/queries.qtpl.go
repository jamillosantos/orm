// Code generated by qtc from "queries.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line queries.qtpl:1
package templates

//line queries.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line queries.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line queries.qtpl:1
func StreamQueries(qw422016 *qt422016.Writer, input *QueriesInput) {
//line queries.qtpl:1
	qw422016.N().S(`
// Code generated by ormgen; DO NOT EDIT.

package `)
//line queries.qtpl:4
	qw422016.E().S(input.Package.Name)
//line queries.qtpl:4
	qw422016.N().S(`

import (
	"github.com/setare/orm"
	sq "github.com/Masterminds/squirrel"
	"context"
	"github.com/pkg/errors"

`)
//line queries.qtpl:12
	if !input.ModelsPackage.Equals(input.Package) {
//line queries.qtpl:12
		qw422016.N().S(`
	"`)
//line queries.qtpl:13
		qw422016.E().S(input.ModelsPackage.ImportPath)
//line queries.qtpl:13
		qw422016.N().S(`"
`)
//line queries.qtpl:14
	}
//line queries.qtpl:14
	qw422016.N().S(`
)

`)
//line queries.qtpl:17
	for _, record := range input.Records {
//line queries.qtpl:17
		qw422016.N().S(`type `)
//line queries.qtpl:18
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:18
		qw422016.N().S(` struct {
	conn      orm.Connection
	baseQuery orm.Query
	err       error
}

func New`)
//line queries.qtpl:24
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:24
		qw422016.N().S(`(conn orm.Connection) *`)
//line queries.qtpl:24
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:24
		qw422016.N().S(` {
	qry := &`)
//line queries.qtpl:25
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:25
		qw422016.N().S(`{
		conn: conn,
		baseQuery: orm.NewQuery(conn, `)
//line queries.qtpl:27
		qw422016.E().S(record.Schema.InternalRef)
//line queries.qtpl:27
		qw422016.N().S(`),
	}
	ds, ok := interface{}(qry).(orm.DefaultScoper)
	if !ok {
		return qry
	}
	qry.err = ds.DefaultScope()
	return qry
}

func (query *`)
//line queries.qtpl:37
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:37
		qw422016.N().S(`) Select(fields ...orm.SchemaField) *`)
//line queries.qtpl:37
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:37
		qw422016.N().S(` {
	query.baseQuery.Select(fields...)
	return query
}

func (query *`)
//line queries.qtpl:42
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:42
		qw422016.N().S(`) AddSelect(fields ...orm.SchemaField) *`)
//line queries.qtpl:42
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:42
		qw422016.N().S(` {
	query.baseQuery.AddSelect(fields...)
	return query
}

func (query *`)
//line queries.qtpl:47
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:47
		qw422016.N().S(`) From(schema orm.Schema) *`)
//line queries.qtpl:47
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:47
		qw422016.N().S(` {
	query.baseQuery.From(schema)
	return query
}

func (query *`)
//line queries.qtpl:52
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:52
		qw422016.N().S(`) Join(joinType orm.JoinType, schema orm.Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:52
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:52
		qw422016.N().S(` {
	query.baseQuery.Join(joinType, schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:57
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:57
		qw422016.N().S(`) InnerJoin(schema orm.Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:57
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:57
		qw422016.N().S(` {
	query.baseQuery.InnerJoin(schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:62
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:62
		qw422016.N().S(`) LeftJoin(schema orm.Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:62
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:62
		qw422016.N().S(` {
	query.baseQuery.LeftJoin(schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:67
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:67
		qw422016.N().S(`) RightJoin(schema orm.Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:67
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:67
		qw422016.N().S(` {
	query.baseQuery.RightJoin(schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:72
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:72
		qw422016.N().S(`) FullJoin(schema orm.Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:72
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:72
		qw422016.N().S(` {
	query.baseQuery.FullJoin(schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:77
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:77
		qw422016.N().S(`) Where(conditions ...sq.Sqlizer) *`)
//line queries.qtpl:77
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:77
		qw422016.N().S(` {
	query.baseQuery.Where(conditions...)
	return query
}

func (query *`)
//line queries.qtpl:82
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:82
		qw422016.N().S(`) Skip(skip int) *`)
//line queries.qtpl:82
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:82
		qw422016.N().S(` {
	query.baseQuery.Skip(skip)
	return query
}

func (query *`)
//line queries.qtpl:87
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:87
		qw422016.N().S(`) Limit(limit int) *`)
//line queries.qtpl:87
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:87
		qw422016.N().S(` {
	query.baseQuery.Limit(limit)
	return query
}

func (query *`)
//line queries.qtpl:92
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:92
		qw422016.N().S(`) GroupBy(fields ...orm.SchemaField) *`)
//line queries.qtpl:92
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:92
		qw422016.N().S(` {
	query.baseQuery.GroupBy(fields...)
	return query
}

func (query *`)
//line queries.qtpl:97
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:97
		qw422016.N().S(`) GroupByHaving(fields []orm.SchemaField, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:97
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:97
		qw422016.N().S(` {
	query.baseQuery.GroupByHaving(fields, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:102
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:102
		qw422016.N().S(`) OrderBy(fields ...orm.SchemaField) *`)
//line queries.qtpl:102
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:102
		qw422016.N().S(` {
	query.baseQuery.OrderBy(fields...)
	return query
}

func (query *`)
//line queries.qtpl:107
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:107
		qw422016.N().S(`) One() (*`)
//line queries.qtpl:107
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line queries.qtpl:107
		qw422016.N().S(`, error) {
	return query.OneContext(context.Background())
}

func (query *`)
//line queries.qtpl:111
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:111
		qw422016.N().S(`) OneContext(ctx context.Context) (*`)
//line queries.qtpl:111
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line queries.qtpl:111
		qw422016.N().S(`, error) {
	if query.err != nil {
		return nil, query.err
	}

	record := &`)
//line queries.qtpl:116
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line queries.qtpl:116
		qw422016.N().S(`{}
	err := query.OnePContext(ctx, record)
	if err != nil {
		return nil, err
	}
	return record, nil
}

func (query *`)
//line queries.qtpl:124
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:124
		qw422016.N().S(`) OneP(record *`)
//line queries.qtpl:124
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line queries.qtpl:124
		qw422016.N().S(`) error {
	return query.OnePContext(context.Background(), record)
}

func (query *`)
//line queries.qtpl:128
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:128
		qw422016.N().S(`) OnePContext(ctx context.Context, record *`)
//line queries.qtpl:128
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line queries.qtpl:128
		qw422016.N().S(`) error {
	if query.err != nil {
		return query.err
	}

	sql, args, err := query.baseQuery.ToSql()
	if err != nil {
		return err
	}
	fields := query.baseQuery.GetSelect()
	if len(fields) == 0 {
		fields = `)
//line queries.qtpl:139
		qw422016.E().S(record.Schema.InternalRef)
//line queries.qtpl:139
		qw422016.N().S(`Fields
	}
	columnValues := make([]interface{}, len(fields))
	for i, field := range fields {
		var fieldAddr interface{}
		`)
//line queries.qtpl:144
		StreamColumnAddresses(qw422016, &ColumnAddressesInput{
			FieldName:  "field.Name()",
			TargetName: "fieldAddr",
			RecordName: "record",
			ErrName:    "err",
			Record:     record,
		})
//line queries.qtpl:150
		qw422016.N().S(`
		if err != nil {
			return err
		}
		columnValues[i] = fieldAddr
	}
	return query.conn.QueryRowContext(ctx, sql, args...).Scan(columnValues...)
}

func (query *`)
//line queries.qtpl:159
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:159
		qw422016.N().S(`) All() (*`)
//line queries.qtpl:159
		qw422016.E().S(record.ResultSet.Type)
//line queries.qtpl:159
		qw422016.N().S(`, error) {
	return query.AllContext(context.Background())
}

func (query *`)
//line queries.qtpl:163
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:163
		qw422016.N().S(`) AllContext(ctx context.Context) (*`)
//line queries.qtpl:163
		qw422016.E().S(record.ResultSet.Type)
//line queries.qtpl:163
		qw422016.N().S(`, error) {
	if query.err != nil {
		return nil, query.err
	}

	sql, args, err := query.baseQuery.ToSql()
	if err != nil {
		return nil, err
	}
	rs, err := query.conn.QueryContext(ctx, sql, args...)
	if err != nil {
		return nil, err
	}
	return New`)
//line queries.qtpl:176
		qw422016.E().S(record.ResultSet.Type)
//line queries.qtpl:176
		qw422016.N().S(`(rs)
}

`)
//line queries.qtpl:179
	}
//line queries.qtpl:180
}

//line queries.qtpl:180
func WriteQueries(qq422016 qtio422016.Writer, input *QueriesInput) {
//line queries.qtpl:180
	qw422016 := qt422016.AcquireWriter(qq422016)
//line queries.qtpl:180
	StreamQueries(qw422016, input)
//line queries.qtpl:180
	qt422016.ReleaseWriter(qw422016)
//line queries.qtpl:180
}

//line queries.qtpl:180
func Queries(input *QueriesInput) string {
//line queries.qtpl:180
	qb422016 := qt422016.AcquireByteBuffer()
//line queries.qtpl:180
	WriteQueries(qb422016, input)
//line queries.qtpl:180
	qs422016 := string(qb422016.B)
//line queries.qtpl:180
	qt422016.ReleaseByteBuffer(qb422016)
//line queries.qtpl:180
	return qs422016
//line queries.qtpl:180
}
