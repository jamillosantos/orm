// Code generated by qtc from "stores.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line stores.qtpl:1
package templates

//line stores.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line stores.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line stores.qtpl:1
func StreamStores(qw422016 *qt422016.Writer, input *StoresInput) {
//line stores.qtpl:1
	qw422016.N().S(`
// Code generated by ormgen; DO NOT EDIT.

package `)
//line stores.qtpl:4
	qw422016.E().S(input.Package.Name)
//line stores.qtpl:4
	qw422016.N().S(`

import (
	"context"
	"github.com/pkg/errors"
	
	"github.com/setare/orm"
	"github.com/setare/orm/query"

`)
//line stores.qtpl:13
	if !input.ModelsPackage.Equals(input.Package) {
//line stores.qtpl:13
		qw422016.N().S(`
	"`)
//line stores.qtpl:14
		qw422016.E().S(input.ModelsPackage.ImportPath)
//line stores.qtpl:14
		qw422016.N().S(`"
`)
//line stores.qtpl:15
	}
//line stores.qtpl:15
	qw422016.N().S(`
)

`)
//line stores.qtpl:18
	for _, record := range input.Records {
//line stores.qtpl:18
		qw422016.N().S(`type `)
//line stores.qtpl:19
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:19
		qw422016.N().S(` struct {
	conn orm.Connection
}

func New`)
//line stores.qtpl:23
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:23
		qw422016.N().S(`(conn orm.Connection) *`)
//line stores.qtpl:23
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:23
		qw422016.N().S(` {
	return &`)
//line stores.qtpl:24
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:24
		qw422016.N().S(`{
		conn,
	}
}

func (store *`)
//line stores.qtpl:29
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:29
		qw422016.N().S(`) Insert(record *`)
//line stores.qtpl:29
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line stores.qtpl:29
		qw422016.N().S(`, fields ...orm.SchemaField) error {
	return store.InsertContext(context.Background(), record, fields...)
}

func (store *`)
//line stores.qtpl:33
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:33
		qw422016.N().S(`) InsertContext(ctx context.Context, record *`)
//line stores.qtpl:33
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line stores.qtpl:33
		qw422016.N().S(`, fields ...orm.SchemaField) error {
	if len(fields) == 0 {
		fields = `)
//line stores.qtpl:35
		qw422016.E().S(record.Schema.InternalRef)
//line stores.qtpl:35
		qw422016.N().S(`Fields
	}
	columnNames := make([]string, len(fields))
	columnValues := make([]interface{}, len(fields))
	var err error
	for i, field := range fields {
		var fieldAddr interface{}
		`)
//line stores.qtpl:42
		StreamColumnAddresses(qw422016, &ColumnAddressesInput{
			FieldName:  "field.Name()",
			TargetName: "fieldAddr",
			RecordName: "record",
			ErrName:    "err",
			Record:     record,
		})
//line stores.qtpl:48
		qw422016.N().S(`
		if err != nil {
			return err
		}
		columnNames[i] = field.String()
		columnValues[i] = fieldAddr
	}
	builder := store.conn.Builder().Insert(`)
//line stores.qtpl:55
		qw422016.E().S(record.Schema.InternalRef)
//line stores.qtpl:55
		qw422016.N().S(`.Table()).Columns(columnNames...).Values(columnValues...)`)
//line stores.qtpl:55
		if record.FieldAutoInc != nil {
//line stores.qtpl:55
			qw422016.N().S(`.Suffix("RETURNING `)
//line stores.qtpl:55
			qw422016.E().S(record.FieldAutoInc.Name)
//line stores.qtpl:55
			qw422016.N().S(`")`)
//line stores.qtpl:55
		}
//line stores.qtpl:55
		qw422016.N().S(`

	sql, args, err := builder.ToSql()
	if err != nil {
		return err
	}
`)
//line stores.qtpl:61
		if record.FieldAutoInc == nil {
//line stores.qtpl:61
			qw422016.N().S(`
	_, err = store.conn.ExecContext(ctx, sql, args...)
	return err
`)
//line stores.qtpl:64
		} else {
//line stores.qtpl:64
			qw422016.N().S(`
	var id `)
//line stores.qtpl:65
			qw422016.E().S(record.FieldAutoInc.Type)
//line stores.qtpl:65
			qw422016.N().S(`
	err = store.conn.QueryRowContext(ctx, sql, args...).Scan(&id)
	if err != nil {
		return err
	}
	record.`)
//line stores.qtpl:70
			qw422016.E().S(record.FieldAutoInc.GoName)
//line stores.qtpl:70
			qw422016.N().S(` = id
	return nil
`)
//line stores.qtpl:72
		}
//line stores.qtpl:72
		qw422016.N().S(`
}

func (store *`)
//line stores.qtpl:75
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:75
		qw422016.N().S(`) Update(record *`)
//line stores.qtpl:75
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line stores.qtpl:75
		qw422016.N().S(`, fields ...orm.SchemaField) (int64, error) {
	return store.UpdateContext(context.Background(), record, fields...)
}

func (store *`)
//line stores.qtpl:79
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:79
		qw422016.N().S(`) UpdateContext(ctx context.Context, record *`)
//line stores.qtpl:79
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line stores.qtpl:79
		qw422016.N().S(`, fields ...orm.SchemaField) (int64, error) {
	if len(fields) == 0 {
		fields = `)
//line stores.qtpl:81
		qw422016.E().S(record.Schema.InternalRef)
//line stores.qtpl:81
		qw422016.N().S(`Fields
	}

	builder := store.conn.Builder().Update(`)
//line stores.qtpl:84
		qw422016.E().S(record.Schema.InternalRef)
//line stores.qtpl:84
		qw422016.N().S(`.Table())
	var err error
	for _, field := range fields {
		var fieldAddr interface{}
		`)
//line stores.qtpl:88
		StreamColumnAddresses(qw422016, &ColumnAddressesInput{
			FieldName:  "field.Name()",
			TargetName: "fieldAddr",
			RecordName: "record",
			ErrName:    "err",
			Record:     record,
		})
//line stores.qtpl:94
		qw422016.N().S(`
		if err != nil {
			return 0, err
		}
		builder = builder.Set(field.String(), fieldAddr)
	}
`)
//line stores.qtpl:100
		for _, field := range record.PrimaryKey {
//line stores.qtpl:100
			qw422016.N().S(`
	builder.Where(query.Eq(query.Raw("`)
//line stores.qtpl:101
			qw422016.E().J(field.Name)
//line stores.qtpl:101
			qw422016.N().S(`"), record.`)
//line stores.qtpl:101
			qw422016.E().S(field.GoName)
//line stores.qtpl:101
			qw422016.N().S(`))
`)
//line stores.qtpl:102
		}
//line stores.qtpl:102
		qw422016.N().S(`
	r, err := builder.ExecContext(ctx)
	if err != nil {
		return 0, err
	}
	return r.RowsAffected()
}

func (store *`)
//line stores.qtpl:110
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:110
		qw422016.N().S(`) Delete(records ...*`)
//line stores.qtpl:110
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line stores.qtpl:110
		qw422016.N().S(`) (int64, error) {
	return store.DeleteContext(context.Background(), records...)
}

func (store *`)
//line stores.qtpl:114
		qw422016.E().S(record.Store.Type)
//line stores.qtpl:114
		qw422016.N().S(`) DeleteContext(ctx context.Context, records ...*`)
//line stores.qtpl:114
		qw422016.E().S(input.ModelsPackage.Ref(input.Package, record.Name))
//line stores.qtpl:114
		qw422016.N().S(`) (int64, error) {
	builder := store.conn.Builder().Delete(`)
//line stores.qtpl:115
		qw422016.E().S(record.Schema.InternalRef)
//line stores.qtpl:115
		qw422016.N().S(`.Table())
	if len(records) > 1 {
		ids := make([]interface{}, len(records) * `)
//line stores.qtpl:117
		qw422016.N().D(len(record.PrimaryKey))
//line stores.qtpl:117
		qw422016.N().S(`)

`)
//line stores.qtpl:119
		if len(record.PrimaryKey) == 1 {
//line stores.qtpl:119
			qw422016.N().S(`
		for i, record := range records {
			ids[i] = record.`)
//line stores.qtpl:121
			qw422016.E().S(record.PrimaryKey[0].GoName)
//line stores.qtpl:121
			qw422016.N().S(`
		}
		builder = builder.Where(query.In(query.Raw("`)
//line stores.qtpl:123
			qw422016.E().J(record.PrimaryKey[0].Name)
//line stores.qtpl:123
			qw422016.N().S(`"), ids))
`)
//line stores.qtpl:124
		} else {
//line stores.qtpl:124
			qw422016.N().S(`
		ors := make([]sq.Sqlizer, 0, len(reocrds))
`)
//line stores.qtpl:126
			for i, field := range record.PrimaryKey {
//line stores.qtpl:126
				qw422016.N().S(`		field`)
//line stores.qtpl:127
				qw422016.N().D(i)
//line stores.qtpl:127
				qw422016.N().S(` := query.Raw("`)
//line stores.qtpl:127
				qw422016.E().J(field.Name)
//line stores.qtpl:127
				qw422016.N().S(`")
`)
//line stores.qtpl:128
			}
//line stores.qtpl:128
			qw422016.N().S(`		for i, record := range records {
			ors[i] = query.And(
`)
//line stores.qtpl:131
			for i, field := range record.PrimaryKey {
//line stores.qtpl:131
				qw422016.N().S(`				query.Eq(field`)
//line stores.qtpl:132
				qw422016.N().D(i)
//line stores.qtpl:132
				qw422016.N().S(`, records[0].`)
//line stores.qtpl:132
				qw422016.E().S(field.GoName)
//line stores.qtpl:132
				qw422016.N().S(`),
`)
//line stores.qtpl:133
			}
//line stores.qtpl:133
			qw422016.N().S(`			)
		}
		builder = builder.Where(ors)
`)
//line stores.qtpl:137
		}
//line stores.qtpl:137
		qw422016.N().S(`
	} else if len(records) == 1 {
`)
//line stores.qtpl:139
		if len(record.PrimaryKey) == 1 {
//line stores.qtpl:139
			qw422016.N().S(`		builder = builder.Where(query.Eq(query.Raw("`)
//line stores.qtpl:140
			qw422016.E().J(record.PrimaryKey[0].Name)
//line stores.qtpl:140
			qw422016.N().S(`"), records[0].`)
//line stores.qtpl:140
			qw422016.E().S(record.PrimaryKey[0].GoName)
//line stores.qtpl:140
			qw422016.N().S(`))
`)
//line stores.qtpl:141
		} else {
//line stores.qtpl:141
			qw422016.N().S(`
		builder = builder
`)
//line stores.qtpl:143
			for _, field := range record.PrimaryKey {
//line stores.qtpl:143
				qw422016.N().S(`	.Where(query.In(query.Raw("`)
//line stores.qtpl:144
				qw422016.E().J(field.Name)
//line stores.qtpl:144
				qw422016.N().S(`"), records[0].`)
//line stores.qtpl:144
				qw422016.E().S(field.GoName)
//line stores.qtpl:144
				qw422016.N().S(`))
`)
//line stores.qtpl:145
			}
//line stores.qtpl:146
		}
//line stores.qtpl:146
		qw422016.N().S(`	} else {
		return 0, nil
	}

	r, err := builder.ExecContext(ctx)
	if err != nil {
		return 0, err
	}
	return r.RowsAffected()
}

`)
//line stores.qtpl:158
	}
//line stores.qtpl:159
}

//line stores.qtpl:159
func WriteStores(qq422016 qtio422016.Writer, input *StoresInput) {
//line stores.qtpl:159
	qw422016 := qt422016.AcquireWriter(qq422016)
//line stores.qtpl:159
	StreamStores(qw422016, input)
//line stores.qtpl:159
	qt422016.ReleaseWriter(qw422016)
//line stores.qtpl:159
}

//line stores.qtpl:159
func Stores(input *StoresInput) string {
//line stores.qtpl:159
	qb422016 := qt422016.AcquireByteBuffer()
//line stores.qtpl:159
	WriteStores(qb422016, input)
//line stores.qtpl:159
	qs422016 := string(qb422016.B)
//line stores.qtpl:159
	qt422016.ReleaseByteBuffer(qb422016)
//line stores.qtpl:159
	return qs422016
//line stores.qtpl:159
}
