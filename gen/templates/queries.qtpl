{% func Queries(input *QueriesInput) %}
// Code generated by ormgen; DO NOT EDIT.

package {%s input.Package.Name %}

import (
	"github.com/jamillosantos/orm"
	"github.com/jamillosantos/sqlf"
	"context"
	"github.com/pkg/errors"

{% if !input.ModelsPackage.Equals(input.Package) %}
	"{%s input.ModelsPackage.ImportPath %}"
{% endif %}
)

{% for _, record := range input.Records -%}
type {%s record.Query.Type %} struct {
	conn      orm.ConnectionPgx
	baseQuery orm.Query
	err       error
}

func New{%s record.Query.Type %}(conn orm.ConnectionPgx) *{%s record.Query.Type %} {
	qry := &{%s record.Query.Type %}{
		conn: conn,
		baseQuery: orm.NewQuery(conn, {%s record.Schema.InternalRef %}),
	}
	ds, ok := interface{}(qry).(orm.DefaultScoper)
	if !ok {
		return qry
	}
	qry.err = ds.DefaultScope()
	return qry
}

func (query *{%s record.Query.Type%}) Select(fields ...orm.SchemaField) *{%s record.Query.Type %} {
	query.baseQuery.Select(fields...)
	return query
}

func (query *{%s record.Query.Type%}) AddSelect(fields ...orm.SchemaField) *{%s record.Query.Type %} {
	query.baseQuery.AddSelect(fields...)
	return query
}

func (query *{%s record.Query.Type%}) From(schema orm.Schema) *{%s record.Query.Type %} {
	query.baseQuery.From(schema)
	return query
}

func (query *{%s record.Query.Type%}) Join(joinType orm.JoinType, schema orm.Schema, condition string, params ...interface{}) *{%s record.Query.Type %} {
	query.baseQuery.Join(joinType, schema, condition, params...)
	return query
}

func (query *{%s record.Query.Type%}) InnerJoin(schema orm.Schema, condition string, params ...interface{}) *{%s record.Query.Type %} {
	query.baseQuery.InnerJoin(schema, condition, params...)
	return query
}

func (query *{%s record.Query.Type%}) LeftJoin(schema orm.Schema, condition string, params ...interface{}) *{%s record.Query.Type %} {
	query.baseQuery.LeftJoin(schema, condition, params...)
	return query
}

func (query *{%s record.Query.Type%}) RightJoin(schema orm.Schema, condition string, params ...interface{}) *{%s record.Query.Type %} {
	query.baseQuery.RightJoin(schema, condition, params...)
	return query
}

func (query *{%s record.Query.Type%}) FullJoin(schema orm.Schema, condition string, params ...interface{}) *{%s record.Query.Type %} {
	query.baseQuery.FullJoin(schema, condition, params...)
	return query
}

func (query *{%s record.Query.Type%}) Where(condition string, params ...interface{}) *{%s record.Query.Type %} {
	query.baseQuery.Where(condition, params...)
	return query
}

func (query *{%s record.Query.Type%}) Skip(skip int) *{%s record.Query.Type %} {
	query.baseQuery.Skip(skip)
	return query
}

func (query *{%s record.Query.Type%}) Limit(limit int) *{%s record.Query.Type %} {
	query.baseQuery.Limit(limit)
	return query
}

func (query *{%s record.Query.Type%}) GroupBy(fields ...interface{}) *{%s record.Query.Type %} {
	query.baseQuery.GroupBy(fields...)
	return query
}

func (query *{%s record.Query.Type%}) GroupByX(f func (groupBy sqlf.GroupBy)) *{%s record.Query.Type %} {
	query.baseQuery.GroupByX(f)
	return query
}

func (query *{%s record.Query.Type%}) OrderBy(fields ...interface{}) *{%s record.Query.Type %} {
	query.baseQuery.OrderBy(fields...)
	return query
}

func (query *{%s record.Query.Type%}) OrderByX(f func(orderBy sqlf.OrderBy)) *{%s record.Query.Type %} {
	query.baseQuery.OrderByX(f)
	return query
}

func (query *{%s record.Query.Type%}) One() (*{%s input.ModelsPackage.Ref(input.Package, record.Name) %}, error) {
	return query.OneContext(context.Background())
}

func (query *{%s record.Query.Type%}) OneContext(ctx context.Context) (*{%s input.ModelsPackage.Ref(input.Package, record.Name) %}, error) {
	if query.err != nil {
		return nil, query.err
	}

	record := &{%s input.ModelsPackage.Ref(input.Package, record.Name) %}{}
	err := query.OnePContext(ctx, record)
	if err != nil {
		return nil, err
	}
	return record, nil
}

func (query *{%s record.Query.Type%}) OneP(record *{%s input.ModelsPackage.Ref(input.Package, record.Name) %}) error {
	return query.OnePContext(context.Background(), record)
}

func (query *{%s record.Query.Type%}) OnePContext(ctx context.Context, record *{%s input.ModelsPackage.Ref(input.Package, record.Name) %}) error {
	if query.err != nil {
		return query.err
	}

	fields := query.baseQuery.GetSelect()
	if len(fields) == 0 {
		fields = {%s record.Schema.InternalRef %}Fields
		query.Select(fields...)
	}
	sql, args, err := query.baseQuery.ToSQL()
	if err != nil {
		return err
	}
	columnValues := make([]interface{}, len(fields))
	for i, field := range fields {
		var fieldAddr interface{}
		{%= ColumnAddresses(&ColumnAddressesInput{
			FieldName: "field.Name()",
			TargetName: "fieldAddr",
			RecordName: "record",
			ErrName: "err",
			Record: record,
		}) %}
		if err != nil {
			return err
		}
		columnValues[i] = fieldAddr
	}
	return query.conn.QueryRow(ctx, sql, args...).Scan(columnValues...)
}

func (query *{%s record.Query.Type%}) All() (*{%s record.ResultSet.Type %}, error) {
	return query.AllContext(context.Background())
}

func (query *{%s record.Query.Type%}) AllContext(ctx context.Context) (*{%s record.ResultSet.Type %}, error) {
	if query.err != nil {
		return nil, query.err
	}

	sql, args, err := query.baseQuery.ToSQL()
	if err != nil {
		return nil, err
	}
	rs, err := query.conn.Query(ctx, sql, args...)
	if err != nil {
		return nil, err
	}
	return New{%s record.ResultSet.Type %}(rs)
}

{% endfor -%}
{% endfunc %}