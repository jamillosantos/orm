{% func ResultSet(input *ResultSetInput) %}
// Code generated by ormgen; DO NOT EDIT.

package {%s input.Package.Name %}

import (
	"github.com/pkg/errors"

	"github.com/jamillosantos/orm"

{% if !input.ModelsPackage.Equals(input.Package) %}
	"{%s input.ModelsPackage.ImportPath %}"
{% endif %}
)

{% for _, record := range input.Records -%}
type {%s record.ResultSet.Type %} struct {
	orm.ResultSetPgx
	columns []string
	fields  []interface{}
}

func New{%s record.ResultSet.Type %}(rs orm.ResultSetPgx) (*{%s record.ResultSet.Type %}, error) {
	descriptions := rs.FieldDescriptions()
	columns := make([]string, len(descriptions))
	for i, d := range descriptions {
		columns[i] = string(d.Name)
	}
	return &{%s record.ResultSet.Type %}{
		ResultSetPgx: rs,
		columns: columns,
		fields: make([]interface{}, len(columns)),
	}, nil
}

func (rs *{%s record.ResultSet.Type %}) Scan(record *{%s input.ModelsPackage.Ref(input.Package, record.Name) %}) error {
	err := rs.ResultSetPgx.Err()
	if err != nil {
		return err
	}

	for i, column := range rs.columns {
		{%= ColumnAddresses(&ColumnAddressesInput{
			FieldName: "column",
			TargetName: "rs.fields[i]",
			RecordName: "record",
			ErrName: "err",
			Record: record,
		}) %}
		if err != nil {
			return err
		}
	}
	return rs.ResultSetPgx.Scan(rs.fields...)
}

{% endfor -%}
{% endfunc %}