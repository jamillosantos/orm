// Code generated by qtc from "queries.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line queries.qtpl:1
package templates

//line queries.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line queries.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line queries.qtpl:1
func StreamQueries(qw422016 *qt422016.Writer, input *QueriesInput) {
//line queries.qtpl:1
	qw422016.N().S(`
package `)
//line queries.qtpl:2
	qw422016.E().S(input.Package.Name)
//line queries.qtpl:2
	qw422016.N().S(`

import (
	"github.com/setare/orm"
)

`)
//line queries.qtpl:8
	for _, record := range input.Records {
//line queries.qtpl:8
		qw422016.N().S(`type `)
//line queries.qtpl:9
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:9
		qw422016.N().S(` struct {
	Conn orm.DBProxy
	query orm.Query
}

func New`)
//line queries.qtpl:14
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:14
		qw422016.N().S(`(conn orm.Connection) *`)
//line queries.qtpl:14
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:14
		qw422016.N().S(` {
	return &`)
//line queries.qtpl:15
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:15
		qw422016.N().S(`{
		Conn: conn,
		query: orm.NewQuery(`)
//line queries.qtpl:17
		qw422016.E().S(record.Schema.InternalRef)
//line queries.qtpl:17
		qw422016.N().S(`),
	}
}

func (query *`)
//line queries.qtpl:21
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:21
		qw422016.N().S(`) Select(fields ...SchemaField) *`)
//line queries.qtpl:21
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:21
		qw422016.N().S(` {
	query.BaseQuery.Select(fields...)
	return query
}

func (query *`)
//line queries.qtpl:26
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:26
		qw422016.N().S(`) AddSelect(fields ...SchemaField) *`)
//line queries.qtpl:26
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:26
		qw422016.N().S(` {
	query.BaseQuery.AddSelect(fields...)
	return query
}

func (query *`)
//line queries.qtpl:31
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:31
		qw422016.N().S(`) From(schema Schema) *`)
//line queries.qtpl:31
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:31
		qw422016.N().S(` {
	query.BaseQuery.From(schema)
	return query
}

func (query *`)
//line queries.qtpl:36
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:36
		qw422016.N().S(`) Join(joinType JoinType, schema Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:36
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:36
		qw422016.N().S(` {
	query.BaseQuery.Join(joinType, schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:41
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:41
		qw422016.N().S(`) InnerJoin(schema Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:41
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:41
		qw422016.N().S(` {
	query.BaseQuery.InnerJoin(schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:46
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:46
		qw422016.N().S(`) LeftJoin(schema Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:46
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:46
		qw422016.N().S(` {
	query.BaseQuery.LeftJoin(schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:51
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:51
		qw422016.N().S(`) RightJoin(schema Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:51
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:51
		qw422016.N().S(` {
	query.BaseQuery.RightJoin(schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:56
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:56
		qw422016.N().S(`) FullJoin(schema Schema, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:56
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:56
		qw422016.N().S(` {
	query.BaseQuery.FullJoin(schema, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:61
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:61
		qw422016.N().S(`) Where(conditions ...sq.Sqlizer) *`)
//line queries.qtpl:61
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:61
		qw422016.N().S(` {
	query.BaseQuery.Where(conditions...)
	return query
}

func (query *`)
//line queries.qtpl:66
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:66
		qw422016.N().S(`) Skip(skip int) *`)
//line queries.qtpl:66
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:66
		qw422016.N().S(` {
	query.BaseQuery.Skip(skip)
	return query
}

func (query *`)
//line queries.qtpl:71
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:71
		qw422016.N().S(`) Limit(limit int) *`)
//line queries.qtpl:71
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:71
		qw422016.N().S(` {
	query.BaseQuery.Limit(limit)
	return query
}

func (query *`)
//line queries.qtpl:76
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:76
		qw422016.N().S(`) GroupBy(fields ...SchemaField) *`)
//line queries.qtpl:76
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:76
		qw422016.N().S(` {
	query.BaseQuery.GroupBy(fields...)
	return query
}

func (query *`)
//line queries.qtpl:81
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:81
		qw422016.N().S(`) GroupByHaving(fields []SchemaField, conditions ...sq.Sqlizer) *`)
//line queries.qtpl:81
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:81
		qw422016.N().S(` {
	query.BaseQuery.GroupByHaving(fields, conditions...)
	return query
}

func (query *`)
//line queries.qtpl:86
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:86
		qw422016.N().S(`) OrderBy(fields ...SchemaField) *`)
//line queries.qtpl:86
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:86
		qw422016.N().S(` {
	query.BaseQuery.OrderBy(fields...)
	return query
}

func (query *`)
//line queries.qtpl:91
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:91
		qw422016.N().S(`) One() (*`)
//line queries.qtpl:91
		qw422016.E().S(record.Name)
//line queries.qtpl:91
		qw422016.N().S(`, error) {
	record := &`)
//line queries.qtpl:92
		qw422016.E().S(record.Name)
//line queries.qtpl:92
		qw422016.N().S(`
	err := query.OneP(record)
	if err != nil {
		return nil, err
	}
	return record, nil
}

func (query *`)
//line queries.qtpl:100
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:100
		qw422016.N().S(`) OneP(record *`)
//line queries.qtpl:100
		qw422016.E().S(record.Name)
//line queries.qtpl:100
		qw422016.N().S(`) (error) {
	//
}

func (query *`)
//line queries.qtpl:104
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:104
		qw422016.N().S(`) All() ([]*`)
//line queries.qtpl:104
		qw422016.E().S(record.Name)
//line queries.qtpl:104
		qw422016.N().S(`, error) {
	//
}

func (query *`)
//line queries.qtpl:108
		qw422016.E().S(record.Query.Type)
//line queries.qtpl:108
		qw422016.N().S(`) AllP(records []*`)
//line queries.qtpl:108
		qw422016.E().S(record.Name)
//line queries.qtpl:108
		qw422016.N().S(`) (error) {
	//
}

`)
//line queries.qtpl:112
	}
//line queries.qtpl:113
}

//line queries.qtpl:113
func WriteQueries(qq422016 qtio422016.Writer, input *QueriesInput) {
//line queries.qtpl:113
	qw422016 := qt422016.AcquireWriter(qq422016)
//line queries.qtpl:113
	StreamQueries(qw422016, input)
//line queries.qtpl:113
	qt422016.ReleaseWriter(qw422016)
//line queries.qtpl:113
}

//line queries.qtpl:113
func Queries(input *QueriesInput) string {
//line queries.qtpl:113
	qb422016 := qt422016.AcquireByteBuffer()
//line queries.qtpl:113
	WriteQueries(qb422016, input)
//line queries.qtpl:113
	qs422016 := string(qb422016.B)
//line queries.qtpl:113
	qt422016.ReleaseByteBuffer(qb422016)
//line queries.qtpl:113
	return qs422016
//line queries.qtpl:113
}
